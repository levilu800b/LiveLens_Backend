# Generated by Django 5.2.1 on 2025-06-03 14:45

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('description', models.TextField(help_text='Brief description of the story', max_length=500)),
                ('content', models.TextField(help_text='Main story content with rich text support')),
                ('excerpt', models.TextField(blank=True, help_text='Auto-generated from content', max_length=300)),
                ('category', models.CharField(choices=[('fiction', 'Fiction'), ('non_fiction', 'Non-Fiction'), ('tech', 'Technology'), ('lifestyle', 'Lifestyle'), ('adventure', 'Adventure'), ('romance', 'Romance'), ('mystery', 'Mystery'), ('fantasy', 'Fantasy'), ('sci_fi', 'Science Fiction'), ('biography', 'Biography'), ('educational', 'Educational'), ('other', 'Other')], default='other', max_length=20)),
                ('tags', models.JSONField(blank=True, default=list, help_text='List of tags for the story')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='stories/thumbnails/')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='stories/covers/')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=10)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('read_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('comment_count', models.PositiveIntegerField(default=0)),
                ('estimated_read_time', models.PositiveIntegerField(default=5, help_text='Estimated read time in minutes', validators=[django.core.validators.MinValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stories', models.ManyToManyField(blank=True, related_name='collections', to='stories.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Story Collection',
                'verbose_name_plural': 'Story Collections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('like', 'Like'), ('read', 'Read'), ('bookmark', 'Bookmark'), ('share', 'Share')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_page_read', models.PositiveIntegerField(default=1)),
                ('reading_progress', models.FloatField(default=0.0, help_text='Percentage of story read (0-100)')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stories.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Story Interaction',
                'verbose_name_plural': 'Story Interactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_number', models.PositiveIntegerField()),
                ('title', models.CharField(blank=True, help_text='Optional page title', max_length=100)),
                ('content', models.TextField(help_text='Page content (300-400 words)')),
                ('page_image', models.ImageField(blank=True, null=True, upload_to='stories/pages/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='stories.story')),
            ],
            options={
                'verbose_name': 'Story Page',
                'verbose_name_plural': 'Story Pages',
                'ordering': ['story', 'page_number'],
            },
        ),
        migrations.CreateModel(
            name='StoryView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('time_spent', models.PositiveIntegerField(default=0, help_text='Time spent reading in seconds')),
                ('pages_viewed', models.JSONField(default=list, help_text='List of page numbers viewed')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='stories.story')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Story View',
                'verbose_name_plural': 'Story Views',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['status', '-created_at'], name='stories_sto_status_896d7c_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['category', '-created_at'], name='stories_sto_categor_2da6c1_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['is_featured', '-created_at'], name='stories_sto_is_feat_5ed3fe_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['is_trending', '-created_at'], name='stories_sto_is_tren_9557bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='storycollection',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='storyinteraction',
            unique_together={('user', 'story', 'interaction_type')},
        ),
        migrations.AlterUniqueTogether(
            name='storypage',
            unique_together={('story', 'page_number')},
        ),
    ]
