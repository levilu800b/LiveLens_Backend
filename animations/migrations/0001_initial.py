# Generated by Django 5.2.1 on 2025-06-07 12:01

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Animation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the animation', max_length=1000)),
                ('short_description', models.CharField(blank=True, help_text='Brief description for cards', max_length=300)),
                ('category', models.CharField(choices=[('2d_traditional', '2D Traditional'), ('2d_digital', '2D Digital'), ('3d_animation', '3D Animation'), ('stop_motion', 'Stop Motion'), ('motion_graphics', 'Motion Graphics'), ('character_animation', 'Character Animation'), ('explainer', 'Explainer Video'), ('educational', 'Educational'), ('entertainment', 'Entertainment'), ('commercial', 'Commercial'), ('music_video', 'Music Video'), ('short_film', 'Short Film'), ('series', 'Series'), ('experimental', 'Experimental'), ('ai_generated', 'AI Generated'), ('other', 'Other')], default='other', max_length=25)),
                ('animation_type', models.CharField(choices=[('2d', '2D Animation'), ('3d', '3D Animation'), ('mixed', 'Mixed Media'), ('motion_graphics', 'Motion Graphics'), ('stop_motion', 'Stop Motion'), ('ai_generated', 'AI Generated')], default='2d', max_length=20)),
                ('tags', models.JSONField(blank=True, default=list, help_text='List of tags for the animation')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='animations/thumbnails/')),
                ('poster', models.ImageField(blank=True, null=True, upload_to='animations/posters/')),
                ('banner', models.ImageField(blank=True, null=True, upload_to='animations/banners/')),
                ('video_file', models.FileField(blank=True, help_text='Main animation video file', null=True, upload_to='animations/videos/')),
                ('trailer_file', models.FileField(blank=True, help_text='Animation trailer', null=True, upload_to='animations/trailers/')),
                ('project_file', models.FileField(blank=True, help_text='Animation project file', null=True, upload_to='animations/projects/')),
                ('storyboard', models.FileField(blank=True, help_text='Storyboard file', null=True, upload_to='animations/storyboards/')),
                ('concept_art', models.ImageField(blank=True, help_text='Concept art', null=True, upload_to='animations/concept_art/')),
                ('duration', models.PositiveIntegerField(default=0, help_text='Duration in seconds', validators=[django.core.validators.MinValueValidator(0)])),
                ('trailer_duration', models.PositiveIntegerField(default=0, help_text='Trailer duration in seconds', validators=[django.core.validators.MinValueValidator(0)])),
                ('video_quality', models.CharField(choices=[('360p', '360p'), ('480p', '480p'), ('720p', '720p HD'), ('1080p', '1080p Full HD'), ('1440p', '1440p QHD'), ('2160p', '4K UHD'), ('4320p', '8K UHD')], default='1080p', max_length=10)),
                ('frame_rate', models.CharField(choices=[('12', '12 FPS'), ('24', '24 FPS'), ('25', '25 FPS'), ('30', '30 FPS'), ('60', '60 FPS')], default='24', max_length=5)),
                ('file_size', models.BigIntegerField(default=0, help_text='File size in bytes')),
                ('resolution_width', models.PositiveIntegerField(default=1920, help_text='Video width in pixels')),
                ('resolution_height', models.PositiveIntegerField(default=1080, help_text='Video height in pixels')),
                ('animation_software', models.CharField(blank=True, help_text='Software used for animation', max_length=100)),
                ('render_engine', models.CharField(blank=True, help_text='Rendering engine used', max_length=100)),
                ('production_time', models.PositiveIntegerField(default=0, help_text='Production time in hours')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived'), ('processing', 'Processing'), ('generating', 'AI Generating')], default='draft', max_length=12)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False, help_text='Requires premium subscription')),
                ('is_series', models.BooleanField(default=False)),
                ('series_name', models.CharField(blank=True, max_length=200)),
                ('episode_number', models.PositiveIntegerField(blank=True, null=True)),
                ('season_number', models.PositiveIntegerField(blank=True, null=True)),
                ('is_ai_generated', models.BooleanField(default=False)),
                ('ai_prompt', models.TextField(blank=True, help_text='AI generation prompt')),
                ('ai_model_used', models.CharField(blank=True, help_text='AI model used for generation', max_length=100)),
                ('generation_parameters', models.JSONField(blank=True, default=dict, help_text='AI generation parameters')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('comment_count', models.PositiveIntegerField(default=0)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('share_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('release_year', models.PositiveIntegerField(blank=True, null=True)),
                ('language', models.CharField(default='English', max_length=50)),
                ('subtitles_available', models.JSONField(blank=True, default=list, help_text='List of available subtitle languages')),
                ('director', models.CharField(blank=True, help_text='Animation director', max_length=200)),
                ('animator', models.CharField(blank=True, help_text='Lead animator(s)', max_length=200)),
                ('voice_actors', models.JSONField(blank=True, default=list, help_text='List of voice actors')),
                ('music_composer', models.CharField(blank=True, help_text='Music composer', max_length=200)),
                ('sound_designer', models.CharField(blank=True, help_text='Sound designer', max_length=200)),
                ('studio', models.CharField(blank=True, help_text='Animation studio', max_length=100)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, help_text='Production budget', max_digits=15, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='animations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Animation',
                'verbose_name_plural': 'Animations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIAnimationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prompt', models.TextField(help_text="User's animation description prompt")),
                ('style', models.CharField(blank=True, help_text='Animation style (e.g., 2D, 3D, cartoon)', max_length=100)),
                ('duration_requested', models.PositiveIntegerField(default=30, help_text='Requested duration in seconds')),
                ('quality_requested', models.CharField(choices=[('360p', '360p'), ('480p', '480p'), ('720p', '720p HD'), ('1080p', '1080p Full HD'), ('1440p', '1440p QHD'), ('2160p', '4K UHD'), ('4320p', '8K UHD')], default='1080p', max_length=10)),
                ('frame_rate_requested', models.CharField(choices=[('12', '12 FPS'), ('24', '24 FPS'), ('25', '25 FPS'), ('30', '30 FPS'), ('60', '60 FPS')], default='24', max_length=5)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=15)),
                ('ai_model_used', models.CharField(blank=True, max_length=100)),
                ('processing_time', models.PositiveIntegerField(default=0, help_text='Processing time in seconds')),
                ('error_message', models.TextField(blank=True)),
                ('additional_parameters', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_animation_requests', to=settings.AUTH_USER_MODEL)),
                ('animation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_requests', to='animations.animation')),
            ],
            options={
                'verbose_name': 'AI Animation Request',
                'verbose_name_plural': 'AI Animation Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnimationCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('animations', models.ManyToManyField(blank=True, related_name='collections', to='animations.animation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='animation_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Animation Collection',
                'verbose_name_plural': 'Animation Collections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnimationInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('like', 'Like'), ('watch', 'Watch'), ('bookmark', 'Bookmark'), ('share', 'Share'), ('download', 'Download'), ('rate', 'Rate')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('watch_progress', models.FloatField(default=0.0, help_text='Percentage watched (0-100)')),
                ('watch_time', models.PositiveIntegerField(default=0, help_text='Time watched in seconds')),
                ('rating', models.PositiveIntegerField(blank=True, help_text='Rating from 1-5 stars', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('animation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='animations.animation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Animation Interaction',
                'verbose_name_plural': 'Animation Interactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnimationPlaylist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=True)),
                ('is_auto_play', models.BooleanField(default=True, help_text='Auto-play next animation in playlist')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='animations/playlist_thumbnails/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('animations', models.ManyToManyField(blank=True, related_name='playlists', to='animations.animation')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='animation_playlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Animation Playlist',
                'verbose_name_plural': 'Animation Playlists',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnimationView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('watch_duration', models.PositiveIntegerField(default=0, help_text='Time watched in seconds')),
                ('completion_percentage', models.FloatField(default=0.0, help_text='Percentage of animation watched')),
                ('quality_watched', models.CharField(blank=True, choices=[('360p', '360p'), ('480p', '480p'), ('720p', '720p HD'), ('1080p', '1080p Full HD'), ('1440p', '1440p QHD'), ('2160p', '4K UHD'), ('4320p', '8K UHD')], max_length=10)),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile'), ('tablet', 'Tablet'), ('tv', 'Smart TV'), ('other', 'Other')], default='other', max_length=20)),
                ('animation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='animations.animation')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Animation View',
                'verbose_name_plural': 'Animation Views',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='animation',
            index=models.Index(fields=['status', '-created_at'], name='animations__status_95bf97_idx'),
        ),
        migrations.AddIndex(
            model_name='animation',
            index=models.Index(fields=['category', '-created_at'], name='animations__categor_925e52_idx'),
        ),
        migrations.AddIndex(
            model_name='animation',
            index=models.Index(fields=['animation_type', '-created_at'], name='animations__animati_6d9ed4_idx'),
        ),
        migrations.AddIndex(
            model_name='animation',
            index=models.Index(fields=['is_featured', '-created_at'], name='animations__is_feat_d23d78_idx'),
        ),
        migrations.AddIndex(
            model_name='animation',
            index=models.Index(fields=['is_trending', '-created_at'], name='animations__is_tren_5b91a6_idx'),
        ),
        migrations.AddIndex(
            model_name='animation',
            index=models.Index(fields=['is_ai_generated', '-created_at'], name='animations__is_ai_g_583173_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='animationcollection',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='animationinteraction',
            index=models.Index(fields=['animation', 'interaction_type'], name='animations__animati_739491_idx'),
        ),
        migrations.AddIndex(
            model_name='animationinteraction',
            index=models.Index(fields=['user', 'interaction_type'], name='animations__user_id_1f7aa7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='animationinteraction',
            unique_together={('user', 'animation', 'interaction_type')},
        ),
        migrations.AddIndex(
            model_name='animationview',
            index=models.Index(fields=['animation', '-viewed_at'], name='animations__animati_a5aa9a_idx'),
        ),
        migrations.AddIndex(
            model_name='animationview',
            index=models.Index(fields=['user', '-viewed_at'], name='animations__user_id_16deb0_idx'),
        ),
    ]
