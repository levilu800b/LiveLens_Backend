# Generated by Django 5.2.1 on 2025-06-05 11:40

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Podcast',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250)),
                ('description', models.TextField(help_text='Detailed episode description', max_length=1000)),
                ('summary', models.CharField(blank=True, help_text='Brief episode summary', max_length=300)),
                ('episode_number', models.PositiveIntegerField(help_text='Episode number within series')),
                ('season_number', models.PositiveIntegerField(default=1, help_text='Season number')),
                ('episode_type', models.CharField(choices=[('full', 'Full Episode'), ('trailer', 'Trailer'), ('bonus', 'Bonus Content'), ('interview', 'Interview'), ('recap', 'Recap'), ('special', 'Special Episode')], default='full', max_length=10)),
                ('audio_file', models.FileField(blank=True, help_text='Main audio file', null=True, upload_to='podcasts/audio/')),
                ('video_file', models.FileField(blank=True, help_text='Video podcast file', null=True, upload_to='podcasts/video/')),
                ('transcript_file', models.FileField(blank=True, help_text='Episode transcript', null=True, upload_to='podcasts/transcripts/')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='podcasts/episodes/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='podcasts/episode_thumbs/')),
                ('duration', models.PositiveIntegerField(default=0, help_text='Duration in seconds', validators=[django.core.validators.MinValueValidator(0)])),
                ('file_size', models.BigIntegerField(default=0, help_text='File size in bytes')),
                ('audio_quality', models.CharField(choices=[('64kbps', '64 kbps'), ('128kbps', '128 kbps'), ('192kbps', '192 kbps'), ('256kbps', '256 kbps'), ('320kbps', '320 kbps')], default='128kbps', max_length=20)),
                ('guest', models.CharField(blank=True, help_text='Episode guest(s)', max_length=200)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Episode-specific tags')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived'), ('scheduled', 'Scheduled')], default='draft', max_length=10)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False, help_text='Requires premium subscription')),
                ('is_explicit', models.BooleanField(default=False, help_text='Contains explicit content')),
                ('play_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('comment_count', models.PositiveIntegerField(default=0)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='Scheduled publish time', null=True)),
                ('external_url', models.URLField(blank=True, help_text='External hosting URL')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcast_episodes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Podcast Episode',
                'verbose_name_plural': 'Podcast Episodes',
                'ordering': ['-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PodcastSeries',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the podcast series', max_length=1000)),
                ('short_description', models.CharField(blank=True, help_text='Brief description for cards', max_length=300)),
                ('category', models.CharField(choices=[('arts', 'Arts'), ('business', 'Business'), ('comedy', 'Comedy'), ('education', 'Education'), ('fiction', 'Fiction'), ('government', 'Government'), ('health_fitness', 'Health & Fitness'), ('history', 'History'), ('kids_family', 'Kids & Family'), ('leisure', 'Leisure'), ('music', 'Music'), ('news', 'News'), ('religion_spirituality', 'Religion & Spirituality'), ('science', 'Science'), ('society_culture', 'Society & Culture'), ('sports', 'Sports'), ('technology', 'Technology'), ('true_crime', 'True Crime'), ('tv_film', 'TV & Film'), ('other', 'Other')], default='other', max_length=25)),
                ('subcategory', models.CharField(blank=True, help_text='Subcategory within main category', max_length=100)),
                ('tags', models.JSONField(blank=True, default=list, help_text='List of tags for the series')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='podcasts/covers/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='podcasts/thumbnails/')),
                ('banner', models.ImageField(blank=True, null=True, upload_to='podcasts/banners/')),
                ('host', models.CharField(help_text='Podcast host name(s)', max_length=200)),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('fr', 'French'), ('de', 'German'), ('it', 'Italian'), ('pt', 'Portuguese'), ('ru', 'Russian'), ('ja', 'Japanese'), ('ko', 'Korean'), ('zh', 'Chinese'), ('ar', 'Arabic'), ('hi', 'Hindi'), ('other', 'Other')], default='en', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_explicit', models.BooleanField(default=False, help_text='Contains explicit content')),
                ('website', models.URLField(blank=True, help_text='Podcast website')),
                ('rss_feed', models.URLField(blank=True, help_text='RSS feed URL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcast_series', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Podcast Series',
                'verbose_name_plural': 'Podcast Series',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PodcastInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('like', 'Like'), ('listen', 'Listen'), ('bookmark', 'Bookmark'), ('share', 'Share'), ('download', 'Download'), ('rate', 'Rate'), ('subscribe', 'Subscribe')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('listen_progress', models.FloatField(default=0.0, help_text='Percentage listened (0-100)')),
                ('listen_time', models.PositiveIntegerField(default=0, help_text='Time listened in seconds')),
                ('rating', models.PositiveIntegerField(blank=True, help_text='Rating from 1-5 stars', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('podcast', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='podcasts.podcast')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('series', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='podcasts.podcastseries')),
            ],
            options={
                'verbose_name': 'Podcast Interaction',
                'verbose_name_plural': 'Podcast Interactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='podcast',
            name='series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episodes', to='podcasts.podcastseries'),
        ),
        migrations.CreateModel(
            name='PodcastSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notifications_enabled', models.BooleanField(default=True, help_text='Get notifications for new episodes')),
                ('auto_download', models.BooleanField(default=False, help_text='Auto-download new episodes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to='podcasts.podcastseries')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcast_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Podcast Subscription',
                'verbose_name_plural': 'Podcast Subscriptions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PodcastView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('listened_at', models.DateTimeField(auto_now_add=True)),
                ('listen_duration', models.PositiveIntegerField(default=0, help_text='Time listened in seconds')),
                ('completion_percentage', models.FloatField(default=0.0, help_text='Percentage of episode listened')),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('mobile', 'Mobile'), ('tablet', 'Tablet'), ('smart_speaker', 'Smart Speaker'), ('car', 'Car Audio'), ('other', 'Other')], default='other', max_length=20)),
                ('podcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='podcasts.podcast')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Podcast View',
                'verbose_name_plural': 'Podcast Views',
                'ordering': ['-listened_at'],
            },
        ),
        migrations.CreateModel(
            name='PodcastPlaylist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('auto_play', models.BooleanField(default=True, help_text='Auto-play next episode')),
                ('shuffle', models.BooleanField(default=False, help_text='Shuffle playback order')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='podcasts/playlist_covers/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('episodes', models.ManyToManyField(blank=True, related_name='playlists', to='podcasts.podcast')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcast_playlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Podcast Playlist',
                'verbose_name_plural': 'Podcast Playlists',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.AddIndex(
            model_name='podcastseries',
            index=models.Index(fields=['category', '-created_at'], name='podcasts_po_categor_080b88_idx'),
        ),
        migrations.AddIndex(
            model_name='podcastseries',
            index=models.Index(fields=['is_featured', '-created_at'], name='podcasts_po_is_feat_3e3c13_idx'),
        ),
        migrations.AddIndex(
            model_name='podcastseries',
            index=models.Index(fields=['is_active', '-created_at'], name='podcasts_po_is_acti_66d573_idx'),
        ),
        migrations.AddIndex(
            model_name='podcastinteraction',
            index=models.Index(fields=['user', 'interaction_type'], name='podcasts_po_user_id_65e12c_idx'),
        ),
        migrations.AddIndex(
            model_name='podcastinteraction',
            index=models.Index(fields=['podcast', 'interaction_type'], name='podcasts_po_podcast_5068cd_idx'),
        ),
        migrations.AddIndex(
            model_name='podcastinteraction',
            index=models.Index(fields=['series', 'interaction_type'], name='podcasts_po_series__6458fc_idx'),
        ),
        migrations.AddIndex(
            model_name='podcast',
            index=models.Index(fields=['series', '-published_at'], name='podcasts_po_series__99d0e3_idx'),
        ),
        migrations.AddIndex(
            model_name='podcast',
            index=models.Index(fields=['status', '-published_at'], name='podcasts_po_status_53a850_idx'),
        ),
        migrations.AddIndex(
            model_name='podcast',
            index=models.Index(fields=['is_featured', '-published_at'], name='podcasts_po_is_feat_6496e5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='podcast',
            unique_together={('series', 'season_number', 'episode_number')},
        ),
        migrations.AlterUniqueTogether(
            name='podcastsubscription',
            unique_together={('user', 'series')},
        ),
        migrations.AddIndex(
            model_name='podcastview',
            index=models.Index(fields=['podcast', '-listened_at'], name='podcasts_po_podcast_cc46a9_idx'),
        ),
        migrations.AddIndex(
            model_name='podcastview',
            index=models.Index(fields=['user', '-listened_at'], name='podcasts_po_user_id_a9e7ee_idx'),
        ),
    ]
