# Generated by Django 5.2.1 on 2025-06-14 13:57

import cloudinary.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LiveVideo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the live video', max_length=1000)),
                ('short_description', models.CharField(blank=True, help_text='Brief description for cards', max_length=300)),
                ('thumbnail', cloudinary.models.CloudinaryField(blank=True, help_text='Thumbnail image for the live video', max_length=255, verbose_name='image')),
                ('video_file', cloudinary.models.CloudinaryField(blank=True, help_text='Pre-recorded video file (if not truly live)', max_length=255, verbose_name='video')),
                ('live_status', models.CharField(choices=[('scheduled', 'Scheduled'), ('live', 'Live Now'), ('ended', 'Ended'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('scheduled_start_time', models.DateTimeField(help_text='When the live stream is scheduled to start')),
                ('scheduled_end_time', models.DateTimeField(blank=True, help_text='When the live stream is scheduled to end', null=True)),
                ('actual_start_time', models.DateTimeField(blank=True, help_text='When the live stream actually started', null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, help_text='When the live stream actually ended', null=True)),
                ('live_stream_url', models.URLField(blank=True, help_text='Live stream URL (RTMP, HLS, etc.)')),
                ('backup_stream_url', models.URLField(blank=True, help_text='Backup stream URL')),
                ('stream_key', models.CharField(blank=True, help_text='Stream key for broadcasting', max_length=255)),
                ('video_quality', models.CharField(choices=[('360p', '360p'), ('480p', '480p'), ('720p', '720p HD'), ('1080p', '1080p Full HD'), ('1440p', '1440p 2K'), ('2160p', '2160p 4K')], default='1080p', max_length=10)),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Expected duration in seconds', null=True)),
                ('max_viewers', models.PositiveIntegerField(default=1000, help_text='Maximum concurrent viewers allowed')),
                ('host_name', models.CharField(blank=True, help_text='Name of the live stream host', max_length=200)),
                ('guest_speakers', models.TextField(blank=True, help_text='List of guest speakers (comma-separated)')),
                ('tags', models.CharField(blank=True, help_text='Tags separated by commas', max_length=500)),
                ('is_featured', models.BooleanField(default=False, help_text='Show in featured section')),
                ('is_premium', models.BooleanField(default=False, help_text='Requires premium subscription')),
                ('allow_chat', models.BooleanField(default=True, help_text='Allow viewers to chat during live stream')),
                ('allow_recording', models.BooleanField(default=True, help_text='Record the live stream for later viewing')),
                ('auto_start', models.BooleanField(default=False, help_text='Automatically start the stream at scheduled time')),
                ('current_viewers', models.PositiveIntegerField(default=0, help_text='Current number of viewers')),
                ('peak_viewers', models.PositiveIntegerField(default=0, help_text='Peak number of concurrent viewers')),
                ('total_views', models.PositiveIntegerField(default=0, help_text='Total number of unique views')),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('comment_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_videos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Live Video',
                'verbose_name_plural': 'Live Videos',
                'ordering': ['-scheduled_start_time'],
            },
        ),
        migrations.CreateModel(
            name='LiveVideoComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(max_length=500)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_moderator', models.BooleanField(default=False, help_text='Is this a moderator message')),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden by moderator')),
                ('stream_time', models.PositiveIntegerField(blank=True, help_text='Time in seconds from stream start when comment was made', null=True)),
                ('live_video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_comments', to='live_video.livevideo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Live Video Comment',
                'verbose_name_plural': 'Live Video Comments',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LiveVideoInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('like', 'Like'), ('watch', 'Watch'), ('bookmark', 'Bookmark'), ('share', 'Share'), ('join', 'Join Stream'), ('leave', 'Leave Stream')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('watch_duration', models.PositiveIntegerField(default=0, help_text='Time watched in seconds')),
                ('joined_at', models.DateTimeField(blank=True, help_text='When user joined the live stream', null=True)),
                ('left_at', models.DateTimeField(blank=True, help_text='When user left the live stream', null=True)),
                ('live_video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='live_video.livevideo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Live Video Interaction',
                'verbose_name_plural': 'Live Video Interactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LiveVideoSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title_template', models.CharField(help_text='Template for live video titles', max_length=200)),
                ('description_template', models.TextField(help_text='Template for live video descriptions', max_length=1000)),
                ('frequency', models.CharField(choices=[('once', 'One Time'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='once', max_length=10)),
                ('start_time', models.TimeField(help_text='Time to start the live stream')),
                ('duration_minutes', models.PositiveIntegerField(default=60, help_text='Expected duration in minutes')),
                ('weekday', models.IntegerField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of week for weekly streams', null=True)),
                ('day_of_month', models.PositiveIntegerField(blank=True, help_text='Day of month for monthly streams', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='live_schedules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Live Video Schedule',
                'verbose_name_plural': 'Live Video Schedules',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='livevideo',
            index=models.Index(fields=['live_status', '-scheduled_start_time'], name='live_video__live_st_246ed1_idx'),
        ),
        migrations.AddIndex(
            model_name='livevideo',
            index=models.Index(fields=['is_featured', '-scheduled_start_time'], name='live_video__is_feat_64a2c0_idx'),
        ),
        migrations.AddIndex(
            model_name='livevideo',
            index=models.Index(fields=['author', '-created_at'], name='live_video__author__973f6f_idx'),
        ),
        migrations.AddIndex(
            model_name='livevideocomment',
            index=models.Index(fields=['live_video', '-timestamp'], name='live_video__live_vi_a74f3a_idx'),
        ),
        migrations.AddIndex(
            model_name='livevideocomment',
            index=models.Index(fields=['user', '-timestamp'], name='live_video__user_id_4078e3_idx'),
        ),
        migrations.AddIndex(
            model_name='livevideointeraction',
            index=models.Index(fields=['live_video', 'interaction_type'], name='live_video__live_vi_e28aa4_idx'),
        ),
        migrations.AddIndex(
            model_name='livevideointeraction',
            index=models.Index(fields=['user', 'interaction_type'], name='live_video__user_id_24ffa5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='livevideointeraction',
            unique_together={('user', 'live_video', 'interaction_type')},
        ),
    ]
